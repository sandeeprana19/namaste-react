Episode-01 | Inception

1. Define an Emmet?
A. An Emmet basically generate code for us inside vs code. For example, if we write HTML:5 then it will give us basic HTML skelton.

2. What is CDN? Why do we use CDN?
A. CDN are Content Delivery Network which is a group of servers that are spread out geographically and connected to each other. For example, we can say that CDN are the website where react has been hosted and we are pulling react into our project.
Content Delivery Network(CDN) are used by almost all websites and application to serve content to users. They offer several benefits, including:
i. Faster load times: CDN use a group of servers in different locations to load data faster. Users load pages from the server closest to them, which decreases load times.
ii. Scalability: CDN make it easier and cheaper to deliver content to users far from a company's headquarters and main servers. This helps businesses scale new markets and expand their audience.
iii. Lower bandwidth costs: CDNs use caching and other optimizations to reduce the data a server needs to provide. This lower bandwidth usage and hosting costs.
iv. Improved SEO: Search engines rank faster websites higher than slower websites with high bounce rates.
v. Affordable infrastructure: CDNs cut down the cost of investing in an infrastructure needed to maintain the speed of the site all around the world.

Other benefits of CDN include: Improved reliability, cost saving, resilience against cyber attacks, improved security and global coverage.

3. What are the ways to inject react into the project?
A. The following are the two ways to inject react into the project:
1. By using react CDN is the first way of injecting react into the project.
2. By using npm install react.

4. Define cross-origin attribute which we see in script tag of react CDN?
A. Cross-Origin Resource Sharing(CORS) is an http feature that allows a web application to access resources from another domain.

5. What is React?
A. Definitions:
- React is a javascript library for building user interfaces. It is declarative, efficient and flexible. React makes it easy to create interactive UI by using a component-based approach.
or
- React is a javascript package. It is some piece of javascript code and it is hosted over npm also.

6. What we are doing when we are importing the react files as CDN links?
A. We are importing the react code into our project and this is how we get react into our project.

7. What happened when we got react into our project using CDN link?
A. As soon as we injected the react code into our project we will get something amazing behind the scene like if we go to the console and try to write react in browser dev tool console then we will see we got the react and it is coming from the react which we injected using the CDN link. And now, the react is available for us to use so now we can use react into our code. And it gives us lots of important functions or methods that we are going to use. This is nothing but some piece of javascript code that facebook engineers wrote and give to us right. We have just directly imported it and injected react into our project.

8. What is the second file in the react CDN link which we are importing is not it is react which is something known as react-DOM.development.js? Why there are two files we are importing as a react CDN link?
A. The first file is react.development.js which is the core file of react or the core react algorithms which is written inside it and the second file is react-DOM.development.js which we need to modify the DOM(Document Object Model). That is why we have injected the two files.

9. Why did react made different files for both of react CDN files? Could not we have just one file and club everything up?
A. No! We can not club everything into one file because see rect does not only works on browsers. React also works on mobile phones as react native and there is something known as react 3d and there are different type of places where react is used. So there are different functions or methods which are being used inside react native or browser or different places. That is why, there are two files. So the main file this react.development.js is the core react thing and the other one is kind of like a bridge between this react and browser so it like react DOM which is like bridge to connect to the DOM.

10. How can we create h1 tag inside react?
A. In react, we use something known as React.createElement() but the API is little different than javascript. So this createElement() takes three arguments:
i. The first argument is what tag we need to create. Suppose we want h1 tag then we will write h1 in the first argument.
ii. The second argument is an object so let give it an empty object for now.
iii. The third argument is what we have to put inside that h1 tag. Let's say: 'Hello World from React!'.

11. How do we put h1 tag inside div id "root" as a children?
A. First of all, we need to tell react what is the root where we need to render stuff up so we need to create a root inside react. First of all, react wants to have a root where it can do all the DOM stuff or DOM manipulation. So we have something known as createRoot() now see creating an element is a core thing of react so it comes form react which is indeed coming from first library which we imported into index.html. But now, creating a root and rendering something inside it then it is the job of react-DOM so we will use ReactDOM.createRoot() and this is how we create root inside react. And then we will pass document.getElementById('root') as an argument of createRoot(). Now, we have created a root for our react library. Now, whatever we will do we just render the heading inside the react. So we just have to write root.render(heading).

12. Is it good practice to put react code inside index.html file?
A. No! We have to create App.js file and put all our react code inside it and then we will inject it to our app by passing App.js file path to src attribute of script tag.

13. What is object which we pass to createElement method as second argument?
A. An object is basically a place where we will give attribute to our tag. Suppose if our h1 tag needs to have an id so we will pass id as key and "heading" as value. Sometime when we create a HTML we have to give some id or class or something like that right. So this is how this object use to give this attributes to a h1 tag or any tags.

14. What is React.createElement()? What is it given to us? What is const heading where we stores React.createElement()?
A. The const heading is an object so this is a react element at the end of day. And heading is basically react element i.e. react h1 element. React element is nothing but a normal javascript object. So when we console heading we will find an object is printed where we will find type property having value h1 and it has something known as props have children plus attribute we pass in to React.createElement(). Props are second and third argument we passed to React.createElement(). So third argument is children which will go inside of h1 tag and second argument are attribute and they all are come inside props.

15. Define root.render(heading)?
A. The root.render(heading) function job is basically to take heading object creates that h1 tag which browser understands and put that h1 tag inside the root element that we put inside createRoot() function as an argument.

16. How does ReactElement works?
A. ReactElement(Object) => HTML(Browser understands).

17. Does the order of injected react CDN links and App.js files matters or not? If yes, then why?
A. Yes! The order of injected react CDN links and App.js files matters and if we put App.js file before react CDN links the browser will throw an error on console like react is not defined. That means react CDN link should be before App.js file. So the order of those files always in sequence when they are imported. So alway we have to keep react CDN links files before App.js because the code inside App.js is using react.

18. What happen if we put App.js file inside head tag in react?
A. If we put App.js inside the head tag in react, our application will not work as expected. This is because App.js is the main component of our react application, and it is responsible for rendering the entire user interface. If we put it inside head tag, it will not be able to render anything, and our application will be blank. The correct place to put App.js is in the body tag, after the opening body tag. This will ensure that it is rendered correctly and that our application works as expected.

19. What is difference between react.development.js and react.production.js CDN links?
A. The main difference between react.development.js and react.production.js is that react.development.js is used for development purpose while react.production.js is used for production purposes.

20. Suppose we already have "<h1>Akshay is here!</h1>" inside div id "root" and we are rendering parent element inside div id "root" then what will happen to h1 tag where will it go? Or parent will come below h1 tag?
A. The "<h1>Akshay is here!</h1>" will be replaced by parent. For some milliseconds that h1 tag will be visible but then it will be replaced by that parent basically that root.render(parent) is replacing that h1 tag. So whatever we will have inside div id "root" what will happen is if we refresh our page everything whatever is there inside div id "root" are getting replaced by whatever we are passing inside root.render() function as an argument.

21. How "<h1>Akshay is here!</h1>" is rendering for the very first time and then it is getting by root.render(parent)?
A. First of all, when the browser reads our HTML so it will print "Akshay is here!" on the browser but as soon as it goes to script it will load react into our app then it load react DOM into our app and then it will load App.js code line by line and when it will reach to time root.render(parent) it will just render our parent inside our root by replacing everything inside root with whatever we are passing in from react.

22. What if we have some more thing on top of suppose we have a h1 tag on top of root div itself right we can have it right like "<h1>Hello Top of Root</h1>" and what if we have h1 tag below our div id "root" like "<h1>Hello Below of Root</h1>"? Will top and below h1 tag will get replaced?
A. "Hello Top of Root" and "Hello Below of Root" stays same that means react is only working inside our div id "root" because as we know we have defined root as div id and everything that are render is render inside root element and the other portion of HTML works the same. This is why we called react as a library also.

23. Difference between library and framework?
A. A library is a collection of pre-written code that can be used to perform specific tasks. On the other hand, a framework is a set of pre-written code that provides a structure for developing software applications.

24. Why we called react as a library?
A. We called react as a library because react can be applied to a small portion of our page itself like react can only work on header or react can work in footer also or react can only work in sidebar also or react only works in the place whatever we make the root as and we had the root as div id "root". Suppose if we have header and if we create root as our header so now the react is only working inside the header div and everything inside header div will be replaced by whatever we will pass in by root.render().
So this is why, react is library as it can work independently in a small portion of our app as well. It is not a full fledged framework.

Episode-02 | Igniting Our App:

25. How to make local project as git repository?
A. By writing "git init" we make local project as git repository.

26. What is the default branch in github and how can we change it to main?
A. Master branch is the default branch in github and by writing git branch -M main we can change default master branch to main branch.

27. Is it good to create README.md file?
A. Yes! It is good to create README.md file.

28. How do we push all the local project code to github for the very first time?
A. First of all, we need to do "git add ." which will add all local project files and then we will do git commit -m "episode-01" and then copy git remote add origin... from github and pass it to terminal to configure remote branch into local project and now we need to push all the code to remote by writing git push origin main. And if we do this, it will push all our local code or changes to our remote repository.

29. Difference between git and github?
A. Git is a version control system that lets you manage and keep track of your source code history. GitHub is a cloud-based hosting service that lets you manage Git repositories.

30. What happens when we do create react app?
A. When we do create react app what happens is:
i. It creates a scaffold for us like it gives us a basic react app which is already production ready.
ii. It automatically also have npm inside it so we do not have to configure it.
iii. It uses webpack bundler and bebel behind the scene to build things up.

31. Suppose if we have to build a fast production ready app can react itself do it as our project is configured to use react so react itself do it?
A. No, if we want to build a fast production ready app react can not itself do it because there are lot of other packages that are required to make our production ready app. Lot of other libraries and lot of other javascript code that somebody else has written makes our code fast and scalable and production ready not just react. So yes, react is making our app fast but to an extent, there are a lot of other things that we need to make our app fast. A lot of other packages that we need to make our app fast.

32. What is npm?
A. Informal: 
NPM is not a node package manager so npm is everything but not node package manager. If we go to npm official website, there are no place where it is written that npm is node package manager. NPM does not stand for Node Package Manager. So NPM developers said that it is everything but not node package manager. So basically NPM does not have a full form.
Formal:
Npm is basically is a standard repository for all the packages. It is one of the biggest package managers. Any package we need to include in our project we can use npm. All the packages are hosted over there. All the libraries we need and all the utility comes from npm. And npm is basically manages that up for us in our project.

33. If NPM is not a Node Package Manager then what it is?
A. So basically, npm manages packages right but it does not stand for node package manager. NPM behind the scene works as a node package manager but it does not stand for node package manager.

34. How do we use npm into our project?
A. So we need to do something known as npm init and there is also npm init -y which will skip lot of thing but we do not want to skip anything so we will not do npm init -y. So we will do npm init then it will ask us few below questions before it configure npm for us like:
i. package name: press enter to go with the default but we can edit it
ii. version: press enter to go with the default
iii. description: write any description
iv. entry point: It will show App.js but our entry point is not App.js as it is index.html right but we will keep it whatever is there by default
v. test command: It will ask us for a test command so just write jest over here. we will be using jest for testing
vi. git repository: press enter to go with the default
vii. keyword: We can give some keywords if we wish to. Let it be like, let's give react, namaste react, etc
viii. author: Sandeep Rana
ix. license: press enter to go with the default

Then it will us Is it ok? then press enter to go with the default yes and once we do it we will get a new package.json file in our local project folder.

35. What is package.json?
A. The package.json file is basically a configuration for npm. It is basically all that configuration of our npm whatever data we gave it will come inside it like name, version, description, etc. NPM has created a json file for us. The package.json keeps a approx version of dependencies or it can keep exact version of dependencies or package.

36. Why do we need package.json file?
A. See npm is package manager right so it will manage all the packages that we will install in our system and sometimes this packages are also known as dependencies. We know, our project is dependent on lot of packages. Those packages with the project is dependant on are the dependencies and npm manages that. NPM will take care of the version of that package suppose if we are using some other library or some other package then npm will also take care of version of that packages in package.json file.

37. What is the most important package in our project?
A. Bundler is the most important package in our project.

38. What is a bundler? What is the job of bundler?
A. When we have these normal HTML, CSS and JS file. Our whole code needs to be bundler together, our whole code needs to be minified, our whole code needs to be cached, our whole code needs to be compressed and our whole code needs to cleaned before it can be send to production. So a bundler help us to do all this things. We must have heard of name something known as web pack, parcel, vite, etc. so these three things are bundlers.
Bundler basically bundles our app so it packages our app properly so that it can be shipped to production.

39. Define SSH?
A. The Secure Shell (SSH) is a network protocol that allows one computer to securely connect to another computer over an unsecured network.

40. How to install parcel?
A. In terminal, write npm install -D parcel.

41. Why we pass -D flag while installing parcel?
A. There are two types of dependency or packages which app can have that we can install:
i. devDependencies: So when we say a devDependencies it means it is generally require for development phase. When we are developing our app then we require that devDependencies.
ii. normal dependencies: Normal dependencies are used in production also.
Parcel is a bundler so chunking minification is not done on production. we will do this in our development phase so we will install as a devDependencies. So this is how we tell npm that we want parcel in our app as a devDependencies but not as a normal dependencies. That is why, we give -D flag while installing parcel.

42. What is ^ before devDependencies version?
A. ^ is a caret which we show before devDependencies version, for example, let's say devDependencies parcel version so today It is latest version is 2.8.3 suppose tomorrow a new version 2.8.4 of parcel released what will happen if we have put this caret (^) into our app parcel will automatically be upgraded to this minor version 2.8.4. Parcel will update its version if we have put in caret (^). That is why, we use caret before parcel version.

43. What will happen if we use tilde(~) before devDependencies version?
A. If we have put tile(~) before devDependencies version, for example, before parcel version then parcel will install the major version automatically suppose tomorrow 3.0.0 is released and if we have put tilde(~) it will just install the major version automatically.

44. What we need to put before devDependencies version so is it caret(^) or tilde(~)? And why?
A. Always, it is safe to put in caret before devDependencies version because It is okay to upgrade the minor version but do not upgrade the major version because sometimes you know what happen is when we have a major upgrade a lot of things will break into our app. So please keep caret over there.

45. Difference between caret(^) and tilde(~)?
A. Caret(^) is minor upgrade and tilde(~) is major upgrade.

46. What is package-lock.json?
A. The package-lock.json keeps a track of exact version all the transitive dependencies that is being installed and which our project will ever need. Suppose if today there is a 2.8.5 released for parcel our package.json will stay like as it is but package-lock.json kind of locks version install and keeps a record of it. So package-lock.json keeps a record of every exact version of that package or dependency which is installed. So this is what the role of package-lock.json and it is different than package.json.

47. What is integrity inside parcel in package-lock.json file?
A. Integrity is basically a hash i.e. sha512 hash.

48. Why hash i.e. sha512 hash is present in parcel => integrity in package-lock.json file?
A. Have we heard of that thing that it is working on my local but I do not know how it break on production. So basically to avoid that package-lock.json keeps a hash to verify that whatever is there in our machine is the same version which is being deployed on to the production. That is why, hash i.e sha512 is present in parcel => integrity in package-lock.json file.

49. What is node_modules? Why node_modules bloats up?
A. The node_modules contains all the code that we fetched from npm. For example, when we did npm install parcel what happened was it just went to the production and took some time like one minute to install parcel so what it was doing like it was fetching all the code of parcel and putting inside node_modules so if we go inside node_modules then we will find folder inside it. So node_modules is basically kind of like a database which contains the actual data of that dependencies or packages that our projects needs.
The node_modules is the collection of dependencies so It is like a dependencies tree so That is why node_modules bloats up.

50. As we install parcel so there should be only exist parcel in node_modules so why there are so many folders or packages or dependencies inside node_modules?
A. Because, our project needs parcel so our project has a dependency parcel. Now parcel as a project has its own dependencies and those dependencies can have It is own dependencies, this is known as transitive dependencies. That is why when we install parcel, parcel says that npm please install other packages also. So that is why we have so many folders or packages or dependencies inside node_modules.

51. How is parcel managing all that thing? How would npm know that parcel has It is dependencies? What are the dependencies of parcel?

52. In our whole project do we have one package.json and package-lock.json files? If no, how many? Define transitive dependencies?
A. No! We do not have one package.json and package-lock.json files in our whole project. Every dependencies, every project that we see will have It is own package.json so if we go to node_modules => parcel then we find that it has It is own package.json file which contains its own dependencies and devDependencies. This is known as transitive dependencies.

53. Should we push node_modules to github or production? If no, where do we put it? And why?
A. Absolutely No! We do not push node_modules to github or production so the best practice is to put it in gitignore so for this we can create a file .gitignore and write /node_modules file name inside it.

54. Define .gitignore file?
A. If we want some files to not go to production or git repository so just put it inside .gitignore file.

55. Should we put package.json and package-lock.json on to git repository and if yes, why? We do not want to put node_modules on to git repository why?
A. Absolutely yes! We can put package.json and package-lock.json on to git repository. We know package.json and package-lock.json maintain a note of what all dependencies. For example, package.json is maintaining that our code need parcel, etc. and package-lock.json is maintaining the exact version of all the parcel dependencies, etc. our project needs so now we understood why this package-lock.json is huge it is basically maintain the lock it is basically maintaining the exact version of each dependencies so it is very very crucial to put package.json and package-lock.json on github repositories.
But we do not have to put node_modules on github because if we have package.json and package-lock.json we can recreate all our node_modules even if we delete our node_modules so to recreate our node_modules we just have to write npm install on terminal then node_modules will be recreated within our local project folder with all the plethora of code. That is why it is not required to push node_modules on git repository.

56. Whatever we can regenerate can we put it on git repository? What should go inside git repository?
A. Absolutely No! We can avoid whatever we can regenerate on git repository.
Only essential things will go inside git repository like package.json and package-lock.json.

57. What is the command to ignite or build our app using parcel?
A. npx parcel index.html is the command to ignite or build our app using parcel.

58. What is npx parcel index.html command?
A. So npx means executing a npm package. Suppose if we want to execute a npm package we just write npx parcel and something. So npx any package name it will execute that npm package. So if we write npx parcel index.html command that means we are executing parcel and index.html is the source so what happens is parcel basically goes to the source index.html and build a development build for our app and it host that development build to localhost:1234 and that's how we can able to access our app over localhost:1234 on browser.

59. Do react CDN link is the preferred way to begin react and react DOM into our project? If no, why?
A. Absolutely No! The react CDN link is not the preferred way to begin react and react DOM into our project. First of all, see fetching react from CDN takes a costly operation. If we will fetch react from CDN, it will make a network called to unpick, unpkg.com and it will get react from unpkg.com. Suppose if we already have react in our node_modules, how easy would it be to use react inside code. So, first thing is that we do not want to make another network call to get react, we will have it already in our node_modules. That is why we will install it. The second thing is today react version is react@18 and suppose tomorrow react@19 comes in and tomorrow some other version of react comes in what will happen is we have to keep change react url version is not it. So it is better to have react inside our package.json as it is easier to manage all our dependencies and it is very easy to manage react also as one of the dependencies inside our package.json.

60. What the short form of the command npm install?
A. The command npm i is the short form of npm install.

61. After installing react and react-DOM how do we use React and ReactDOM in our code?
A. After installing react and react-DOM, we will use the following:
- For React use a keyword import React from "react".
- For ReactDOM use a keyword import ReactDOM form "react-DOM".

62. What is "react" and "react-DOM" when we import React and ReactDOM from "react" and "react-DOM" respectively?
A. The "react" and "react-DOM" is basically referred to the react and react-DOM respectively inside our node_modules. So both of them will come from node_modules.

63. What does it mean that "Browser script cannot have imports or exports" that parcel throws?
A. "Browser script cannot have imports or exports" means that parcel throws is basically we are injecting App.js using script so parcel treat the script as a browser script or parcel treat that App.js is the normal javascript file. So basically parcel says that it can not understand what is import so parcel is considering the script as a normal javascript and normal javascript does not have import in it.

64. How can we tell to parcel that App.js file which is injected through script is not a normal javascript file?
A. So to tell parcel that App.js file which is injected through script is not a normal javascript file by writing attribute type="module" and pass it to script tag. If we will write type="module" in App.js file will not be normal browser script so it will be considered as a module.

65. Explain briefly about the warning which we will after import ReactDOM from "react-DOM"?
A. Earlier ReactDOM use to be imported from "react-DOM" now react says that is the new ReactDOM which they have got in and it is inside "react-DOM/client". Then we see the warning will go away in chrome dev tool console.

66. After saving the file how browser automatically reload?
A. After saving the file browser automatically reload because this powerful thing is done by parcel.

67. What does parcel doing for us? Explain briefly.
A. Parcel are doing the following things for us:
- Dev build: Parcel create the dev build for us.
- Local server: Parcel create a local server for us. It host our app to the server.
- HMR: HMR stand for Hot Module Replacement.
- File Watching Algorithm: Parcel uses a file watching algorithm which is written in c++
- Caching: Parcel is also caching things for giving us faster builds.
- Image optimization: Parcel will do images optimization for us.
- Minification: Suppose if we create a production build parcel will do minification our files also.
- Bundling: Parcel will do bundling all the files for us.
- Compress: Parcel will also compress our files. Files need to be compress so that the size is small so that we can ship this smaller version on to the code. It will remove all the wide spaces from your code. It minified or packed all our javascript files and ship it on to production.
- Consistent Hashing: Parcel is also doing consistent hashing which is doing lot of things.
- Code splitting: Parcel will be doing code splitting for us which will splits our files.
- Differential bundling: Parcel can also do differential bundling to support older browser.
- Diagnostic: Parcel is doing diagnostic behind the scene of our app.
- Error Handling: Parcel is also giving us good error handling or error suggestions.
- HTTPs: Parcel also give us a way to host our app on https. Suppose in our development environment so right now we do not have https but suppose if we want to test something which is works on SSL(Secure Socket Layer) i.e. https parcel give us that feature also.
- Tree shaking: Parcel is also doing tree shaking so you know tree shaking algorithm what happens is see in our whole code suppose we have hundred of functions code but suppose we are just using four or five functions in our code so what parcel will do it will tree shake our files. Parcel will remove unused code for us.
- Different dev and production bundles: Parcel have different build for dev. Parcel create different dev and production bundle because production build takes a little more time than building it for dev. Some optimization are more on production build and there are less optimization on dev build.

68. What does parcel automatically refreshing the page means? How parcel automatically refreshing the page?
A. Parcel automatically refreshing the page means if we change anything into the file and as soon as we save it then parcel automatically refreshes our page this is happening because parcel is doing something known as HMR(Hot Module Replacement). So parcel is basically reading all the files and it is keeping a track. And parcel uses a file watching algorithm which is written in c++ and it keep an eye on each file as soon as we are developing something or we change anything into our code parcel is keeping a track of every say we do in our project. As soon as we do parcel build it once again.

69. Why parcel reduces or increase the time on terminal whenever it built our app? And how parcel is taking so less time to built our app?
A. Parcel reduces or increase the time whatever it build our app because parcel is caching things for us which give us faster builds.

70. Where parcel is caching things up?
A. When we install parcel and we build our project then parcel quickly sneaked into our project and it also took some space as a parcel-cache into our project codebase. So this parcel-cache has those binary files and this parcel-cache is basically caching everything that we do and it is supporting HMR and it watching all those files so that the next built are developed faster.

71. Why our react app is fast? What is making our app optimize? What makes our react app performant? What makes our development experience better?
A. Yes, react is making our app fast but there are so many more thing that bundlers are doing like parcel, etc. So these things aren't automatically present but it parcel or webpack or vite or any bundlers that we uses doing it for us so right now parcel is doing all these things for us. Parcel is giving muscle to our skelton and parcel is giving energy to our app so It is not just react. And parcel itself is not doing everything on It is own, for example, for minification parcel would be using some of the libraries so parcel is the manager of all the libraries. But parcel is such a beast that it is managing everything for us and it is giving so many things for us. Therefore, our react app is so fast.

72. What is differential bundling?
A. Differential bundling means our app can be open on internet explorer or an older version of internet explorer or google chrome or firefox or mobile browser or something so parcel takes care of all that and it will give differential bundling to our app so that our app runs smoothly on older browsers as well. Parcel give us that ability that we will have a different bundle for different type of apps or older browsers. Parcel will add some extra things that will help us to do all of it.

73. How can we create a prod build?
A. So if we need to create a prod build we need to write npx parcel build index.html.

74. How to fix error when we write npx parcel build index.html?
A. In package.json file, we do not need "main": "App.js" when we are using parcel. So this "main" basically see it is a way to tell npm it is a entry point of our app but when we using parcel we gave the entry point is index.html so parcel conflicts with "App.js" so we will get error so remove this "main": "App.js" because npx package is automatically generated for us so remove this line "main": "App.js" from package.json.

75. When we do npx parcel build index.html where does that build goes up? Explain the production build briefly.
A. When we do npx build index.html then parcel will bundle, minify, all the crazy staff and it will put all those files inside a new folder called dist but right now those existing files inside dist folder is used for development so dist is containing development builds files. Now when we will build a production build so parcel will build it inside already existing dist folder so what we will do is let delete dist folder and this can be automatically be generated. So now we will generate a production build right which will generate dist folder automatically which will contain main three files like css, js and HTML so this dist is basically hosted things on browser which is coming from dist. Suppose if we have lot of files right then parcel will compress, minify, tree shaking everything, etc. to those three files and now those three files contains all code that we had written so those three files are the production ready code of our app. Now this production build is highly optimize build which we can pushed on to production and serve this app to the user. It will fast, performant and optimized.

76. What is dist folder?
A. So what parcel does is when we execute parcel right so when we write npx parcel index.html it generates a development builds for our project and it hosted on localhost:1234 so when it generate a development build It is put it up in dist folder. So the page content we are seeing on browser is coming from dist folder and it is not coming from outside of dist folder. And when we refresh the page it was using parcel-cache and dist to update the page using that HMR(Hot Module Replacement).

77. What are css.map and js.map files?
A. The css.map and js.map files are required by parcel so we can ignore them.

78. Do parcel-cache and dist folders can be regenerated? How?
A. Absolutely yes, these two folders parcel-cache and dist can be regenerated by writing the command npx parcel index.html (development build) and npx parcel build index.html (production build).

79. Whether we have to put parcel-cache and dist inside gitignore? If yes, why?
A. Yes! Because we already have sufficient information to regenerated so we will just write npx parcel index.html on our server these files will be generated once again. See we take our code and hosted upon github now, for example, what will happen is suppose in our local we have a code right now we put this code into our github repository and this code is deployed on to a server. So pushed this code to git and then server fetches this code and the server basically host the app to end user. So what happens is all the commands that we write in our local right like npx parcel build index.html, etc. those commands will run on server also. That is why our code will have It is known package.json and node_modules so we will push package.json on to git and we will not put node_modules because we have package.json on git and the server will fetch this package.json and it will do npm install and it will install node_modules again. So server will package.json and package-lock.json and it will do a npm install on the server and we will get all of node_modules in there. The server will have It is own parcel-cache and dist folders so do not have to push them on to server. So That is why, we will put parcel-cache and dist inside gitignore.

80. Does our local directly connect to server?
A. Absolutely no, our local is not directly connected to server.

81. Does copy of node_modules on server is same as copy of node_modules on local?
A. No! The copy of node_modules on local is different and the copy of node_modules on server is different right.

82. How to make our app compatible with older version of browser?
A. To make our app compatible with older version of browser we will use something known as browserslist. So we will go to node_modules right browserslist is already there. Now we have to tell browserslist that what all browser we do have support our app in so for that we will give it some configuration. So now we have to tell our project that what all browsers should our app will supported in.

83. What is browserslist? How to configure it?
A. The browserslist is npm package and it needs some configuration. And we will configure it inside package.json where we will add something known as browserslist which will take an array of browsers. Suppose if we have to just support chrome so we can write something like "last 2 Chrome versions" then our app will be compatible for last 2 chrome versions so whatever the latest last 2 chrome versions will there our app will be compatible with all and we can also write "last 10 Chrome versions" and we can also write something like "last 2 Firefox versions". And now our app will work on last 2 Chrome and Firefox versions. Suppose we just say last 2 versions it will supports all the browsers last 2 versions and which will covers 79% of total overall browser or we can give last 10 versions of all the browser then it will cover 93%. So will keep it like last 2 versions which will keep our app lite otherwise parcel will put in ranDOM extra code in our system so just do not want to put in for now. So this is how we can configure browserslist to work on older versions of browsers as well because parcel takes care of it along with browserslist.

84. Does what ever browserslist configuration we will give inside package.json will our app only work on those given configuration browserslist?
A. No! When we will give browserslist configuration right it means that our app will definitely 100% of the times will work on those given browserslist configuration like last 2 Chrome and Firefox versions. It might not work on rest of the browsers but our app will definitely work in whatever configuration we will give to browserslist.

85. How did we get know what to write inside browserslist configuration?
A. we will get to know what to write inside browserslist configuration by going to browserslist.dev website so we can play with it like if we write last 2 Chrome versions then it will shows us last 2 chrome versions.

86. How do we create our own create react app manually? Describe briefly.
A. Basically with all these parcel, bebel and browserslist we have create our own create react app. This is what it is inside our create react app is not it.

Episode-03 | Laying the foundation:

87. How to create a script for development and production build?
A. So script is an npm script which we need to create that script in package.json where we will find scripts section and we can create a different scripts for built-in development, built inside like start our project in dev mode, build our production ready app, etc. So let's create a script for starting our project in dev mode so we name the script as "start": "parcel index.html" which will run our project in development mode when npm will call this command. So basically we need to write this command "start": "parcel index.html" in package.json that's need to be executed by npm to run this script.

And now let's create script for production build so let's name script as "build": "parcel build index.html" which will basically production build for our project.

Above scripts are the industry standard in all the project like be it react, different libraries or framework or whatever are there right now. Generally, we create the above scripts and it is the standard convention in the industry to use this npm scripts to start and build our project.

88. How do we run our project for development using script?
A. So basically we won't do npx parcel index.html anymore so we will write npm run and then the name of script that is start so the command will be npm run start which will do same thing so it basically called the script start parcel index.html.

89. How do we build our project for project using script?
A. Just write npm run build so this will build our project and it will create relevant files like index.html, js file, etc.

90. What the short form of npm run start which npm give us?
A. Basically npm give us short form so we can write npm start which is exactly same as npm run start.

91. Can we write npm build instead of npm run build?
A. No.

92. What is the meaning of npm start?
A. The npm start means npm run start which behind the scene execute the package parcel with a index.html because we have configured this inside package.json file.

93. Do react element is basically a HTML element? If no, then why and how after rendering react element becomes a HTML element on browser?
A. No! React element is not a HTML element because when we do React.createElement what happens is react will basically creates an object so React.createElement() at the end of the day is an object. Now, when we do root.render() the powerful library ReactDOM takes this object and convert to a HTML and push it to the browser. When we say push it we mean ReactDOM will replace everything that is inside the div id "root" with whatever we're rendering from root.render(ReactElement).

94. What is JSX?
A. JSX is a javascript syntax which is easier to create react element. It is convention where we kind of merge HTML and JS together. JSX is not HTML inside javascript. JSX is different than HTML. JSX is HTML or XML like syntax.

95. Does JSX is part of react?
A. No! React is different & JSX is different.

96. Can we write react without JSX? If yes, then why should we write JSX in react?
A. Yes! We can write react without JSX also. We can build all the big application without using JSX also. But JSX makes our developers life easy that is why we use JSX in react.

97. What are the two ways to create react element?
A. There are two ways to create react element:
i. Using react core - React.createElement().
ii. Using JSX which html like syntax, for example, const jsxHeading = <h1>Namaste React using JSX</h1>.

98. If we store JSX inside const variable what does it return on console?
A. If we store JSX inside const variable then it will return an object on console.

99. In this code const jsxHeading = <h1>Namaste React using JSX</h1> does JSX here is valid javascript? If no, why?
A. No! It is not a valid javascript as per say and this is not a pure javascript because see javascript does not comes with built-in JSX inside it because our JS engine does not understand JSX. Any javascript code is such that JS engine understands it so JS engine cannot understands the jsx code because JS engine understands ECMAScript like ES6 so this is what is pure javascript that our JS engine understands not just ES6 all the versions of javascript as it is the standard so this is what javascript understand and that is what our browser understand. Therefore, jsx is not a valid or pure javascript.

100. If JS engine not able to read this jsx code const jsxHeading = <h1>Namaste React using JSX</h1> then how this code is working & printed in react?
A. Parcel is doing the job behind the scenes even before the whole jsx code reaches to the JS engine it is transpiled before it reaches to the JS engine and JS engine received the code that browser or react can understand.

101. What is the meaning of transpile?
A. Transpile means the let's say jsx code is converted to the code browser or react can understand.

102. Will root.render(jsxHeading) or ReactDOM understand the jsx code which is passed as an argument to render function?
A. No! The root.render(jsxHeading) or ReactDOM will not understand the jsx code which is passed as an argument to render function.

103. Does parcel is transpiling the JSX code by itself before it reaches to the JS engine? If no, then who is doing the job of transpilation for parcel?
A. No! Parcel is not transpiling the JSX code by itself before it reaches to the JS engine. Parcel is like a manager for us so it doesn't do lot of things by itself right. Parcel gives the responsibility of transpilation to a package which is known as bebel. As soon as we write something on to JSX code and save it so parcel builds it right so as soon as we save it babel converted the updated JSX code quickly to a code that react will understand. Babel is transpiling our JSX code.

104. What is Babel?
A. Babel is a javascript compiler or transpiler.

105. Do Babel is created by facebook?
A. No! Babel isn't created by facebook.

106. How JSX works or whats the job of babel?
A. When we write JSX so now JSX code is transpiled by babel to React.createElement() behind the scenes and this React.createElement() makes the ReactElement which is JS object and this ReactElement is then render on to the DOM as an HTMLElement by ReactDOM. So kind of JSX behind the scenes at the end of the day is React.createElement() isn't it.

107. Does babel job is to only convert JSX code to react code? If no, then what the other job of babel?
A. No! Babel job isn't only to convert JSX code to react code. But it does a lot of other things babel is a transpiler or compiler we know some older browsers don't understand the newer version of javascript like ES6 right so babel transpile that ES6 code that older browser understand. Babel does lot of transpilation so it is a champ in dealing with converting one code to another.

108. What is Babel at the end of the day?
A. Babel is again some piece of code right or some piece of javascript code. It's a javascript library. It's a node library. It's a npm package which takes a piece of code reads that code and coverts that code to something else so babel jobs is this. And Babel convert different type of code to different type of code.

109. What is the slight difference between HTML and JSX?
A. In HTML, we write class attribute as class while in JSX we write class attribute as className.

110. In which case we have to write attributes in JSX?
A. If we have to write attributes in JSX then we have to write in camel case like className, tabIndex, etc.

111. Explore the various attribute of various tags in JSX?
A. The following are the various attributes of various tags in JSX:
I. a: href, target, rel, download and type.
II. abbr: title.
III. address.
IV. area: alt, coords, shape, href, target, rel and download.
V. article.
VI. aside.
VII. audio: src, crossOrigin, preload, autoPlay, controls, loop and muted.
VII. b.
IX. base: href and target.
X. bdi: dir.
XI. bdo: dir.
XII. blockquote.
XIII. body.
XIV. br.
XV. button: type, value, name, disabled, form, formAction, formEncType, formMethod, formTarget and autoFocus.
XVI. canvas: width and height.
XVII. caption.
XVIII. cite.
XIX. code.
XX. col: span and width.
XXI. colgroup: span.
XXII. command: type, label, icon, disabled, checked and radioGroup.
XXIII. data: value.
XXIV. datalist: id.
XXV. dd
XXVI. del: dateTime.
XXVII. details: open.
XXVIII. dfn: title.
XXIX. dialog: open.
XXX. div.
XXXI. dl.
XXXII. dt.
XXXIII. em.
XXXIV. embed: src, type, width and height.
XXXV. fieldset: disabled, form and name.
XXXVI. figcaption.
XXXVII. figure.
XXXVIII. footer.
XXXIX. form: action, method, target, encType, autoComplete, name and noValidate.
XL. h1.
XLI. h2.
XLII. h3.
XLIII. h4.
XLIV. h5.
XLV. h6.
XLVI. head.
XLVII. header.
XLVIII. hr.
XLIX. html: manifest
L. iframe: src, name, sandbox, width, height, seamless and allowFullScreen.
LI. img: src, alt, crossOrigin, useMap, width and height.
LII. input: type, name, value, checked, disabled, placeholder, required autoFocus, min, max, maxLength, minLength, pattern, form, accept, alt, autoComplete, multiple and size.
LIII. ins: dataTime.
LIV. kbd.
LV. keygen: autoFocus, disabled, form, keyType and name.
LVI. label: htmlFor.
LVII. legend.
LVIII. li: value.
LIX. link: href, rel, media, hrefLang, type, sizes and crossOrigin.
LX. main.
LXI. map: name. 
LXII. mark.
LXIII. menu: type and label.
LXIV. meta: name, httpEquiv, content and charSet.
LXV. meter: value, min, max, low, high and optimum.
LXVI. nav.
LXVII. noScript.
LXVIII. object: data, type, width, height, useMap, name, form and classID.
LXIX. ol: start and type.
LXX. optgroup: disabled and label.
LXXI. option: selected, label, disabled, and value.
LXXII. output: name and form.
LXXIII. p.
LXXIV. param: name, value and type.
LXXV. picture.
LXXVI. pre.
LXXVII. progress: value and max.
LXXVIII. q.
LXXIX. rp.
LXXX. rt.
LXXXI. ruby.
LXXXII. s.
LXXXIII. samp.
LXXXIV.script: src, type, async, defer and crossOrigin.
LXXXV. section.
LXXXVI. select: name, multiple, required, autoFocus, disabled, form and size.
LXXXVII. small.
LXXXVIII. source: src, type, sizes and media.
LXXXIX. span.
XC. strong.
XCI. style: type, media and scoped.
XCII. sub.
XCIII. summary. 
XCIV. sup.
XCV. table: cellPadding, cellSpacing, summary and width.
XCVI. tbody.
XCVII. td: headers, colSpan and rowSpan.
XCVIII. textarea.
XCIX. tfoot.
C. th.
CI. thead.
CII. time.
CIII. title.
CIV. tr.
CV. track.
CVI. u.
CVII. ul.
CVIII. var.
CIX. video.
CX. wbr.

112. What is single line and multiple line things in JSX?
A. When we writing JSX right if our JSX is in single line then this is perfectly valid JSX. But suppose if we want to write in multiple lines right then we have to write the JSX inside parentheses so basically we have to wrap it inside round bracket.

113. Why we have to wrap JSX inside round bracket when we write it on to multiple times?
A. We wrap JSX inside round bracket when we write it on to multiple lines because babel needs to understand right where is JSX starting and ending so it is required to wrap JSX code inside round bracket if we are writing it in multiple lines. We can wrap single line of JSX code inside round bracket but it isn't mandatory but is mandatory while we write multiple lines of JSX code.

114. What is a React Component?
A. There are two types of components in react:
i. Class based component: Class based component is the old way of writing code. Class based component uses javascript classes to create component.
ii. Functional component: Functional component uses javascript function to create component.

115. What is React Functional Component?
A. React Functional Component is just a normal javascript function and that's all is React Functional Component which returns JSX code or react element and not just react element it can return a branch of react element. Just remember, whenever we create any react functional component create with a capital letter otherwise we will get an error because it's a react way to understand that this is a component.

116. If suppose we return one liner JSX code then do we need to return it inside curly braces? If no, then why?
A. No! If we return one liner JSX code then we don't need to return it inside curly braces because it is a perfectly valid functional component.

117. Does JSX code can be nested also inside react functional component while returning it? If yes, then how?
A. Yes! We can wrap JSX code inside div with an id or class and return it is react functional component and this is a perfectly valid functional component.

118. If suppose we want to render a react functional component as an argument of render function so can we render it? If no, then why?
A. No! We can't render react functional component as an argument of render function because we render a react element as an argument of render function so react functional component isn't a react element.

119. How do we render react functional component as an argument of render function?
A. We can render react functional component as an argument of render function by wrapping it inside angular bracket like </> like root.render(<HeadingComponent/>). This is how we will render a functional component on the page. This is the syntax which babel understand.

120. How would babel get to know that an argument we pass to render function by wrapping it inside angular brackets like <HeadingComponent /> is a react functional component?
A. So when babel sees an angular bracket and see HeadingComponent in it so it understands that there must be some HeadingComponent must be existing there. So babel understand it like this. So that's why, we write an argument of render function by wrapping it inside angular bracket like <HeadingComponent /> so this is how we render a react functional component.

121. How can we render one functional component like Title component inside another component like HeadingComponent?
A. Just wrap Title component inside angular brackets like <Title /> and put it inside another component that is HeadingComponent so babel will transpile that JSX code return in Title component and react will then at the end transpile to HTMLElement which will then replace that <Title /> component in HeadingComponent.

122. Does browsers cares about what components are there and what components are nested between components? If no, then what does browsers cares about?
A. No! Browsers doesn't cares about what components are there and what components are nested between components. So browsers needs HTML to render. So root.render() is converting everything to HTMLElement and browsers is rendering it.

123. What is component composition?
A. When we compose two components one into another it is known as component composition.

124. Can we use a normal function instead of arrow function in react functional component? If yes, then why?
A. Yes! We can use a normal functional instead of arrow function in react functional component because at the end of the day everything is javascript so react is javascript.

125. Which type of function is the industry standard way to use in react functional component?
A. Arrow function is the industry standard way to use in react functional component.

126. What is the important amazing super power of JSX?
A. The important amazing super power of JSX is that anywhere inside parentheses if we write curly braces inside JSX then we can run any piece of javascript expression meaning we can write any javascript code inside curly braces. For example, suppose we have an normal javascript variable let's call it as constant number = 10000 and now we can just write const variable number inside curly brace which is indeed inside JSX code parentheses and then babel will just put 10000 instead of {number} and then ultimately ReactDOM will render 10000 on browser. So we can inject any javascript code like mathematical calculation also inside JSX and it comes down as an HTML.

127. How can we put react element inside react functional component?
A. So we know react element is javascript object but it is stored inside normal javascript const variable let's say const title = ReactElement so this title is a normal javascript const variable so we can just write this title inside curly braces like {title} and now whatever is there inside that title will come in place of {title}.

128. How do we put a react element inside a react element?
A. The same way like we put react element inside react functional component. so we can compose any react element inside react element.

129. Why did browser throws ReferenceError: Cannot access "HeadingComponent" before initialization?
A. At the end of the day everything is javascript right so we cannot use a const variable before initializing it in javascript right. Therefore, browser throws ReferenceError: Cannot access "HeadingComponent" before initializing. So that is why we need to maintain the order even in react because ultimately react is javascript at the end of the day.

130. Can we create infinite loop inside JSX code?
A. Yes! We can create infinite loop inside JSX code.

131. Can we put react functional component inside react element?
A. Yes! We can put react functional component inside react element.

132. Suppose some data is coming from an API and it's response is stored inside a const variable? Now what if this API send some malicious data and suppose attackers tries to send some code which will get executed? Suppose attackers get access to runs some javascript in our code or browser then what all an attackers can do?
A. JSX is so amazing that it takes care of this injections attacks from attackers end. Suppose even if API passes some malicious data to our code JSX will escape it so we can assume that JSX is sanitizing the data. So whenever any data is wrap inside curly braces then the JSX or browser won't blindly run it because JSX will sanitize our data and then pass in. So JSX prevents cross-side scripting attack for us. This is how powerful JSX is. No need to know about the response data feel free to use it whatever we wish to write inside curly braces because JSX sanitizes everything we pass inside curly braces. So nobody can do malicious attack into our JSX code using loop holes or curly braces. It's automatically taken care by react.

133. While pointing one react functional component into another react functional component can we write it like this <Title></Title> without <Title />?
A. Yes! We can point one react functional component into another react functional component like this <Title></Title> without <Title />.

134. Can we write react functional component multiple times inside another react functional component?
A. Yes! We can write react functional component multiple times inside another react functional component.

135. Does these <Title></Title> and <Title ?> are same? If yes, then why?
A. Yes! These <Title></Title> and <Title /> are exactly same because its just a conventions.

136. Can we call react functional component inside of curly braces withing another react functional component? If yes, then why?
A. Yes! We can call react functional component inside of curly braces within another react functional component because react functional component is just a normal javascript function at the end of the day.

137. Does these three things like {Title()}, <Title /> and <Title></Title> are one and the same things?
A. Yes! These three things like {Title()}, <Title /> and <Title></Title> are one and the same thing.

138. Why we use import keyword in react?
A. Importing in react is a way to access code that is written in other files. This can be useful for organizing our code and making it more reusable. Therefore, we use import keyword in react.

139. Why we only use const variable to store anything in react?
A. In react, it is generally recommended to use constant variables whenever possible. This is because constant variables help to improve readability, maintainability and performance or our code. Therefore, we only use const variable to store anything in react.

140. Why we use upper camel case or pascal case naming convention while defining react functional component?
A. To differentiate react functional component from regular HTMLElement and enhance the readability of the code. That is why, we use upper camel case or pascal case naming convention while defining react functional component.

141. Why arrow function is the preferred way instead of function declaration and function expression in react?
A. Arrow function provides a numbers of benefits over function declaration and function expression like conciseness, lexical this binding and implicit return which makes our code concise, readable and maintainable. Therefore, arrow function is the preferred way instead of function declaration and function expression in react.

Episode-04 | Talk is Cheap, Show Me the Code:

142. Whenever we ask to build any app what the first thing we need to do?
A. Whenever we ask to build any app the first thing we need to do is planning if our planning is good code is very easy to write.

143. What we need to plan while building front-end application?
A. We need to plan the below following things while building front-end application:
I. We should exactly know what we're going to build.
II. What is the process of building it? How it will look? So first of all in the planning comes UI design or layout or wire frame or mock right. So first of all we'll do that planning and then we'll start writing code for it. So don't just blindly start writing code. So we do this planning because once we have visual picture in our head that where things will come up it will be very easy to write code.

144. What components do our app like namaste food app will have?
A. So once we had seen the wire frame or mockup and once we exactly know what we're going to build then we can discuss about what component can our app have. Suppose we have a big app component or something in that we'll have main major three components like:
I. HeaderComponent: Our HeaderComponent will have LogoComponent, NavItemsComponent, etc.
II. BodyComponent: BodyComponent will have SearchComponent, RestaurantContainerComponent and inside we'll have RestaurantCardComponent, etc.
III. FooterComponent: FooterComponent will have CopyrightComponent, LinksComponent, AddressComponent, ContactComponent, etc.

145. What we need to do whenever we say that we'll repeating lot of code suppose there will be a lot of restro cards?
A. We need to make our code modular whenever we say that we'll be repeating lot of code suppose there will be a lot of restro cards so let's build a separate component for restro card.

146. What are the ways of writing CSS in react?
A. The following are the ways of writing CSS in react:
I. External CSS is the first way to write CSS in react.
II. Inline CSS in react aren't used like HTML style attribute so style attribute are given using a javascript object as a value in react. So basically this style takes a javascript object. So basically, we have to write const StyledCard variable and store object into it and then this object can have CSS properties suppose we have to give backgroundColor: "gray" and then we have to pass this StyledCard inside curly braces as a value for style attribute in JSX.
III. We can directly write object which will contain style properties inside curly brace of style attribute in JSX. So basically what we have done in this style attribute takes a javascript object and if we have to give it a javascript object then we have to wrap it inside curly braces.
IV. There is one more form like MaterialUI, Tailwind CSS, other libraries or framework out there in CSS.

147. Which way isn't the preferred way of writing CSS in react?
A. Pointing to the style object isn't the preferred way of writing CSS in react.

148. What do you mean by double curly braces in JSX?
A. The first curly braces means it is telling that there is sme piece of javascript while the second curly braces means it is a javascript object.

149. What is props?
A. The props is a short form for properties. Properties is something which we can pass to the component. Suppose we want to dynamically pass some data to some component so we can pass it as a props. The props at the end of the day is just normal argument to a function. So basically, when we say we're passing a props to a component it is exactly like saying we're passing some arguments to a function.

150. What react will do with props that are passed to a functional component?
A. So react will basically take all the props and it will wrap all the props inside an object and pass this object as a props to functional component as a argument. So this props will be an object.

151. How do we read or use props inside JSX?
A. The props are javascript object so we can wrap it inside curly braces because we can write any piece of javascript inside curly braces so as props is just a javascript object so we can write something like {props.resName} and it will be replaced with restro name.

152. How can we dynamically pass in some data to a component?
A. When we dynamically pass in some data to a component we pass in as a props.

153. Can we pass any number of props we wish to ?
A. Yes! We can pass any number of props we wish to a component tag and react will wrap all of them and pass it to functional component.

154. How many ways are there to destructure props?
A. The following are the ways to destructure props:
I. We can destructure props on the fly after all props is a javascript object so it can be destructure like {resName, cuisine} as a parameter of functional component.
II. We can destructure props inside functional component block like const {resName, cuisine} = props.
III. Generally, the data will come from backend to us in the form of JSON so after storing data in const variable we'll pass it as a value of prop like <RestaurantCard resData={resObj} /> and then we can pass to functional component as a props where we can use it the way we like to. For example, we can follow step I or II from above to use it inside component.

155. Do react is doing some magic of destructuring of passed props to a functional component behind the scene? If no, then who is doing it?
A. No! React isn't doing some magic of destructuring of passed props to a functional component behind the scene. As this is just the plain javascript destructuring of object.

156. How does data come from backend to us?
A. Data will come from backend to us in form of a JSON (JavaScript Object Notation).

157. Define config driven UI? Explain it?
A. So when we open any website lets say Swiggy we see offers cards carousel and this offers are available in Bengaluru then suppose there are other offer in Kolkata so these offer card carousel will be different in Kolkata and these offer card carousel will be different in mumbai and there might be no offer card carousel in Dehradun. So we'll not create different websites for different part of country states because our website is driven by data and this is known as config driven UI. OUr website is driven by config. So basically, controlling our UI using data or config which comes from backend. So config driven UI is that our UI is basically driven by a config. This is the latest practice that every companies follows now. So all the UI is driven by a config which is an API data. Now suppose there is a carousel right so this carousel can have different data for delhi or mumbai or Bengaluru or Kolkata and suppose thee is no carousel it won't even show carousel. So we have written the UI once and now according to the data which is coming from backend our UI is getting changed. This is known as config driven UI. For example, suppose we want to show a red color background in mumbai and a green color background in Kolkata we can do that too so we have to just send our color in API data as a config and this config will drive our UI this is known as config driven UI.

158. Suppose if we have to pass all the data into component so will we keep pass it one by one as a prop? If no, then what we can do?
A. No! We don't have to pass all the data into component as a prop one by one because our head will be messed up if we do so. So what we'll do is we'll pass lets say resObj variable into which we'll have API data object inside curly braces as a value for resData prop in component like this <RestaurantCard resData={resObj} /> and then we get resData as a props which is an argument passed to a functional component and in the props we'll get resData and from resData we can use data of resData object.

159. How can we change array to comma separated values?
A. We can use array property join method and pass ", " as an argument of it and by doing this we can change array to comma separated values.

160. What is Cloudinary?
A. Cloudinary is just a CDN so when we build large scale application we'll put all the images in the cDN.

161. How we have to write component while building production ready app?
A. We have to write reusable component while building production ready app.

162. Why we create reusable component?
A. Just because we created reuseable component we can able to pass in dynamic props inside it because we made a reusable component.

163. How can we loop component inside JSX?
A. We can loop component inside JSX by using map method. So we'll add map method onto array of object.

164. What does unique "key" prop(property) means?
A. An unique "key" prop(property) means that each of list item should be uniquely represented. So each of item should have a key prop define into item that is component whenever we're looping on anything lets say list we have to give a key prop over component. This "key" is a reserved word so its meant to be like "key" and we need to pass in unique id into it. So for each item we have to pass in an item id or something.

165. Why we need to define key as a prop of component while looping it as a list item?
A. So when we loop over a lot of thing suppose we have a card container and now we have different children inside it and these children are RestaurantCards. So what happens is react optimize it render cycle. So when there are components at the same level that we looped in so what happen these component need to have unique id suppose we have ID1, ID2, ID3, ID4, etc. so they should be uniquely represented because suppose there is a new restaurant which came in and it came in at the first place so what will happen is our DOM into which react will have to insert a new RestaurantCard component on the first isn't it if we don't give an id. For example, suppose there are no ids and a new RestaurantCard came in what will react do is react will rerender all the RestaurantCards because react doesn't know right which RestaurantCard is new because react can't uniquely identify those RestaurantCards so react will rerender all those RestaurantCards. If there is one more RestaurantCard added to its parent container so react doesn't know right what place it need to put that RestaurantCard whether it has to came in at the 1st or 2nd or 3rd place. So what react does is basically react clean the container and rerender all the RestaurantCard components because react doesn't know which is new RestaurantCard added so it will treat all the RestaurantCard as same. But if we give each of the RestaurantCard component an unique id and new RestaurantCard came in with ID: xyz which is unique so now react exactly knows that ID1, ID2, ID3 and ID4 will already be there and the new element as come up in the first place as ID: xyz so react will just render one restro over there and it not render all the existing RestaurantCard. This is a huge optimization while we're writing code. Suppose if we're building infinite scroll or suppose if we're building a restro list where there are hundred of restro on the page so think about every time react rerender it will render all the hundred component so its a bad thing right. So we need to uniquely identify each and every loop item or list item. So whenever we are doing something on loop or whenever we're writing a map make a habit to add a key into list item component as a prop and this key should be unique. If we don't give a unique key react will throw warning once again. So key is very important so never ever forget to define it whenever we do a map.

166. Do it takes a big performance hit if we don't define key?
A. Yes! It's takes a big performance hit if we don't define key.

167. Do react itself says never use index as a key value? If yes, then why?
A. Yes! React itself says never use index as a key value because index as a key is anti-pattern.

Episode - 05 | Lets Get Hooked

168. Can we do everything what react do using normal HTML CSS and JavaScript?
A. Yes! We can do everything that react do using normal HTML, CSS and JavaScript.

169. If we can do everything using HTML, CSS and JavaScript then why do we use React?
A. The beauty of using a framework or a library is that it makes our developer experience easy. React makes us write less code and do more on the web page. This is the major job of a framework or a library like react is. So react gives us super power so that we can builds this large scalable production ready performance applications. React makes our coding experience every fast and then also optimizes something on web page so that things happens very fast. Therefor, we use react for everything in spite of knowing teh fact the everything can also be done by using HTML, CSS and JavaScript.

170. Is it good practice to keep such a large file into our App.js file? If no, then what the best practice?
A. No! It isn't a good practice to keep such a large file into our App.js file. The best practice in the industry is to makes separate file for separate components.

171. Where do we keep all the code in the react library?
A. Generally, there is very good convention in the industry so all the code or main code in the react library or project we generally keep it in a src folder.

172. Can we build react project without src folder? If yes, then why we need src folder?
A. Yes! We can build react project without src folder. But as there is very good convention in the industry that all the main code in the react project should be kept inside src folder because it's clean right everybody understand that in the src we'll find the source code files. So therefore, we need src folder.

173. Can we create our whole app inside one single file? If yes, explain briefly?
A. Yes! We can create our whole app inside one single file. And at the end of the day that is what happens right parcel will take down all our code and merge it into one file and minify or compress it and do all this staff right at the end of day it is happening like that. But remember the code that we write is for human isn't it so for human it is very logical to create separate files for separate components and because we know our app or a real world project will have like thousand of components we can't write all of those components inside one single file like App.js isn't it. So we need to structure our app in a proper way okay thats is how a production ready code looks.

174. What is the best common practice inside react project => src folder?
A. To create components folder inside src folder is the best common practice inside react project.

175. Is it mandatory to create src folder and then inside it components and then all that staff?
A. No! It isn't mandatory to create src folder and then inside it components and then all that staff.

176. Can we structure our folders the way we want to?
A. Yes! We can structure our folder the way we want to.

177. Where do we'll put all the components?
A. We'll put all the components inside src => components folder.

178. Is there a recommended way to structure a react projects?
A. No! React doesn't have opinions on how we put files into folders.

179. Do react says avoid too much nesting while creating file structure into react project?
A. Yes! React says avoid too much nesting while creating file structure into react project.

180. Is it good to follow js instead of jsx file extension while defining file name? If yes, then why?
A. Yes! It is good to follow js instead of jsx file extension while defining file name because it doesn't matter much so we don't have to over think about it as they are one and the same thing. And it will make a zero difference if we write js or jsx file extension over here. So just keep it simple because simple code is the best code as it is easiest to maintain.

181. Do we need to export component before import form another component where we want to use?
A. Yes! We need to export component before import from another component where we want to use.

182. How to export component?
A. We can export component like export default componentName.

183. How to import component?
A. We can import component like import ComponentName from "component path here".

184. Can we write component file extension like js or jsx while defining import component path? If yes, then is it mandatory to write file extension js or jsx?
A. Yes! We can write component file extension like js or jsx while defining import component pat but it isn't mandatory to write that file extension because react will treat it has a javascript file by itself. 

185. Can we export and import in any js files?
A. Yes! We can export and import in any js files.

186. Do we need to keep hard coded data in our component file? If No, then why?
A. No! We never need to keep hard coded data in our component file because this is the industry standard and also a best practice which is follow in the industry.

187. Where do we keep hard coded data? Explain briefly?
A. The common or best practice is to keep it inside separate file that is known as generally constant.js or config.js or utils.js or something like that so the standard way is to create a folder utils. So all the utility files right which are common utility we'll put those files inside utils folder right. Some people also like to call or write utils folder like common or config but we write it as utils which means utilities that will be used all across our app and then we'll create a file name constants.js.

188. Why did we write utils file constants.js name starting with first small letter?
A. The constants.js file isn't a component file. Therefore, we write utils file constants.js name starting with first small letter and it should be a camel case.

189. Which case we need to follow while defining const name in constants.js file?
A. We need to follow combination of two cases that are uppercase and snake case while defining const name in constants.js file as this is the best practice and industry standard.

190. How many types of export and import are there?
A. There are two types of export and import:
I. Default export or import.
II. Named export or import.

191. When and how to use default export?
A. When we wants to export one file in a single file then we'll use default export so we need to write export default ComponentName or constantName.

192. When and how to use named export?
A. When we wants to export multiple files in a single file then we'll use named export so we need to write export const variable name in front of multiple const variable.

193. Can we write default export multiple times in a single file? If no, then what will happen if we write it?
A. No! We can't write default export multiple times in a single file and if we try to do so then react will throw an error like "A module conn't have multiple default exports".

194. How do we import named export?
A. When we'll import there will be a slight difference in importing. So whenever we have the named export we have to write curly braces and then whatever we need to import inside it like this import { namedExport file name } from "file path".

195. How do we import default export?
A. So whenever we have the default export we don't have to write default export ComponentName or const variable inside curly braces so we can import something like this import CDN_URL from "file path".

196. Can we export a component using named exports?
A. Yes! We can also export a component using named export.

197. Which type of export is best practice to use for component?
A. Default export is the best practice to use for component unless we have multiple components in a single file.

198. Can we use default export along with a named export in a single file for the functional component? If yes, then explain briefly?
A. Yes! We can use default export along with a named export in a single file for the functional component and then it depends on us how we wanna import that functional component right like by using default import or named import and while doing so we doesn't get any error from parcel or browser dev tool console. So that's what proves that we can import component using both ways.

199. Shall the content of our component files in an app needs to exceeds hundred times? If no, then explain briefly?
A. No! The content of our component files in app shouldn't exceeds hundred times and fi it does that means we're doing something wrong so then we need to break it down to different components and files. So it always a good practice to keep our component small and clean.

200. How to handle onClick event handler?
A. To handle onClick even handler we need to pass onClick attribute to button tag and now this onClick takes a callback arrow function so this is the function which will be called after onClick.

201. Do all the events which are there in javascript does all those are also in react as well?
A. Yes! All the events which are there in javascript are also available in react as well.

202. How are restaurant cards are coming on browser? How to filter out the restaurant card which are having more than 4 rating so how we do it? After filtering, how do we update our UI and how do we create a super powerful react variable?
A. First of all, let's understand how are these restaurant cards are coming on browser so these are coming from the resList const variable right so the data is in resList isn't it and this resList has some mock data inside it isn't it so what we'll do suppose if we wanted to show three restaurant cards on browser so we should just change this resList and our web page will change isn't it because our UI is config driven right so if our resList will change then everything will change isn't it so this is basic of our dynamism in our react app. Suppose if we didn't have this resList const variable so lets ditch and let's create our own restaurant list so lets call it has listOfRestaurants. And suppose this listOfRestaurants is empty so now instead of resList we'll use listOfRestaurants and lets power our UI by using listOfRestaurants in place of resList and after it we'll see empty restaurant list right because there no restaurant stored in listOfRestaurants const variable right. Suppose if we have one basic restaurant details store inside listOfRestaurants so we'll see one restaurant on browser right and if we add one more restaurant then we'll see two restaurant on browser right. Now, onClick of button we've to do something inside callback function so that we can only filter top rated restaurant which is more than 4 rating. So basically, we have to somehow write a filter logic inside callback arrow function of onClick event handler so onClick of this button we need to filter out something so if our listOfRestaurants have two restaurants our UI will display two restaurants on browser. See whenever we have a react app there is a UI layer and a data layer so the UI layer will display what is being send by data layer right. So in our data layer we have two objects so UI layer will display two cards now suppose somehow our listOfRestaurants modify or filter to one restaurant so the UI will automatically show the one restaurant right. So we have to write something like listOfRestaurants = listOfRestaurants.filter((res) => res.info.avgRating > 4) so this will filter out all the restaurants and update the listOfRestaurants const variable.

So basically, whenever we click button our listOfRestaurants will only contain filtered restaurants but UI isn't updated on browser so basically don't we think that our listOfRestaurants automatically changes or refreshed once we filtered out restaurant how cool it would be instead of writing that logic. This is super power which react has so you know when we say react is fast so react is fast and efficient in DOM manipulation and this is the exact problem what react is solving. Suppose if we want to keep our data and UI layer consistent with each other that is where react comes into picture so if our data change our UI layer changes so this is thing which all the frameworks like React, Angular and Vue are trying to solve by updating the DOM efficiently. So if we click on Top Rated Restaurant button then our listOfRestaurants changes to two restaurants so our UI should update accordingly to the data right as our UI is tight to listOfRestaurants so our UI will automatically change so to do this react gives us super power. So right now this listOfRestaurants is normal javascript let variable but if we give this listOfRestaurants super of power of react then it will become super energetic react variable which is also called it as state variable. So basically it is like a state variable of the component which is a super powerful react variable. For creating super powerful react variable we'll use a react hook which is known as useState() hook.

203. What is react hooks?
A. React hooks is a normal javascript function which is given to us by react and it is pre-build and the only thing is that the function comes with some super powers. That function had some logic return behind the scenes inside react. That function is utility function given by react to us. So there are multiple functions those are known as react hooks.

204. If react hooks is normal javascript utility functions then who wrote those utility functions? And where it is written?
A. Facebook developers wrote those normal javascript utility functions which is known as react hooks. They wrote those normal javascript utility functions inside react which we import into file and we got this react inside node_modules after installing react right so after installing it we got all utility functions inside it and then ultimately into our code.

205. How many types of most important react hooks are there?
A. There are two most important react hooks:
I. useState().
II. useEffect().

206. Define useState() hook?
A. The useState() hook basically give us or generate super powerful state variable in react.

207. How do we use useState() hook? How do we create state variable? How do we use state variable?
A. First of all, we need to import this useState() by a named import from react like import {useState} from "react" so here we're importing useState hook as a named import because react developer might have named export this useState hook inside react file. So useState is use to create state variable that is why the name is useState.
So to create state variable we'll call this useState() and then it will give us state variable and then we'll receive the state variable within an array like this const [listOfRestaurants] = useState(). And now this listOfRestaurants state variable is super powerful react variable. So now we'll pass empty array to useState like this const [listOfRestaurants] = useState([]] and now this empty array will become default value of listOfRestaurants state variable so whatever we pass to this useState() as an argument it will become default value of state variable that useState() hook return in this case that is listOfRestaurants.
We'll use this listOfRestaurants state variable normally because it behave like a normal javascript variable only.

208. Why useState is called state variable?
A. The useState maintains the state of our component. Therefore, useState is called state variable.

209. What is the scope of local state variable like useState?
A. The scope of local state variable like useState is inside the scope of functional component where it is defined.

210. How do we modify the state variable?
A. Suppose if we want to modify listOfRestaurants state variable we can't do something like this listOfRestaurants = [] because this isn't valid we can't modify it like this. So we have to modify listOfRestaurants state variable by a function and the function comes at the second parameter into an array return by useState() hook which is known as setListOfRestaurants. So basically, we can name this setListOfRestaurants modifier function whatever we wish to so we can also write it as setListOfRestaurants but it is a preferred convention in the industry if the state variable name is listOfRestaurants put the modifier name as setListOfRestaurants so basically we apply a set before any state variable name so it isn't a mandatory thing it's just a nomenclature which we follow in the industry. So setListOfRestaurants is use to update listOfRestaurants state variable now suppose onClick of Top Rated Restaurant button we want to update listOfRestaurants state variable so we can't do listOfRestaurants = then applying filter method onto it because it isn't a proper way of updating a state variable. So we'll call setListOfRestaurants and pass in new data which we want to push inside listOfRestaurants state variable so basically, for example, we'll create a filteredList into which we'll store filtered listOfRestaurants and now we need to pass this filteredList as a value for listOfRestaurants state variable by passing this filteredList as an argument of setListOfRestaurants. So basically, we're updating the listOfRestaurants state variable with the filteredList.

211. Define render?
A. Informal definition:
So basically, the super power variable keeps the UI in sync with the data layer. If listOfRestaurants was a normal variable right . So if we'll update it our UI doesn't update but if we have a super power react variable it will keep the UI in sync with that variable. As soon as our listOfRestaurants changes it will automatically refresh our component and this is known as render.
Formal definition:
Whenever a state variable updates react rerenders the components and this is known as render.

212. What is the meaning of rerender?
A. The meaning of rerender is suppose if we're clicking the Top Rated Restaurants button we're changing the state variable and the react is rendering our component. So basically, react behind the scene what it is doing is as soon as the listOfRestaurants state variable or super power react variable updates from anywhere meaning setListOfRestaurants is being called react will remove this Body component and update it properly an it will quickly do that. So it will very quickly update out UI.

213. What the only thing react is good?
A. React is only good at DOM operations or manipulation. This is the core logic of React right. So this is the only thing react is good.

214. What is Reconciliation Algorithm?
A. On the UI suppose we have a DOM right. DOM is like a tree right those tags are like tree. Suppose we have a resContainer and these resContainer has 7 restroCards now suppose our UI changes to filtering this sever restroCards to three filter restroCards. Whenever we have seven restroCards UI right react creates a virtual DOM of it.

215. Define virtual DOM?
A. Virtual DOM isn't an actual DOM. So virtual DOM is the representation of actual DOM. So virtual DOM is basically those react element and this react element is an object so similarly whenever we have a big structure it is all an object. So object is basically a react virtual DOM.

216. What is diff algorithm?
A. Diff algorithm basically finds out the difference between two virtual DOM that are updated virtual and previous virtual DOM. Suppose we have a restroContainer which ahs a severn restro cards now we clicked Top Rated Restaurants button and filter out top rated restaurants as per set condition.

217. What is react filter?
A. The whole algorithm like reconciliation algorithm, virtual DOM and diff algorithm is known as React Fiber. This React Fiber is a new algorithm which came up in React 16. After React 16, this algorithm is known as React Fiber and then React Fiber is a new way of finding diff and updating the DOM.

218. Does react touch actual DOM a lot?
A. No! React doesn't touch actual DOM a lot.

219. Why react is fast?
A. React is doing efficient DOM manipulation because it has a virtual DOM which is javascript object representation of actual DOM. Virtual DOM concept exists from a long time in software engineering so react took that and builds its core algorithm over that virtual DOM. So React efficiently finds out the difference between old virtual DOM and new virtual DOM and update the real DOM and UI and this is in the core of react algorithm. Therefore, react is fast.

220. What does an useState() hook returns? And what we do with it?
A. An useState() hook returns an array which we destructure on the fly that contains state variable and state variable modifier function. For example, like this [listOfRestaurants, setListOfRestaurants].

Episode-06 | Exploring the world

221. Define Monolith Architecture? Describe it?
A. So traditionally, you know when the app or web app was developed so they are all developed using a monolith architecture. So early, we have a huge big projects right and suppose we're building an application in this huge big project we use to have a small pieces right so this project itself have code of APIs which are developed by us. We also have UI code inside the same project. We have authentication code inside the same project. We have database connective code inside the same project. We can have notification so sending SMS code inside this project. So in this whole application we have APIs, we have backend written, we have frontend written, we have authentication written, we have connection to DB written, we have notification written, so all the code are there in the same service. And in this whole project you know even if we have to make a single change suppose if I have to change the color of a button right so what we have do we have to build this whole project and we have to deploy this whole project which is the big bulky project. So this is called Monolith Architecture.

222. What is Microservices Architecture? Describe it?
A. In the microservices architecture, we have different services for different jobs. So we have a service which is like backend service, we have a UI service, we have a authentication service, we have a maybe like a service which connects to DB which maintains a database right, we have a service for our SMS sending, we have a service for maybe like lets say email notification. So there are different services and you know there all microservices are known as microservices or small services. And all these services combine together forms a big app. And all these microservices talk to each other depending upon the use cases right. We had separate UI project, we have a separate backend project, we have a separate notification project, we have separate database thing and for each and every small thing we had a different project right. And this is know as separation of concern and single responsibility principle. So microservices architecture follows a single responsibility principle where each and every service has its own job and nobody is entering with it. Now with microservice architecture all of teams work on their own independent service like a backend teams is different maintaining their backend project and they have their own deployment cycle and everything is separate. So this is what is microservice architecture.

223. How do microservices interacts with each other?
A. These microservices needs to interacts with each other to make the whole application work like so the Ui services needs to talk to backend service to fetch the data and show it on UI, the backend service needs to talk to DB service isn't it, the backend service needs to talk to the auth service right. So there are different type of connections between this services right the backend service needs to talk to the notification service. So all these services talk to each other right.

224. How are microservices are deployed? And how can we access this services?
A. So suppose we have our own microservices architecture so we can assume that our react project that we're making is a UI microservice and this UI microservice is written in react. And you know one more advantage of microservice is we can have different tech stack for different things. Suppose in monolith we had a one big project a java application then we have to do everything in java but UI service written in react, we can have backend written in java, we can have DB written in python, we can have SMS service written in golan. So we can write our microservice in any architecture we want to.

225. Is it standard to develop all the UI projects based on react or angular or vue in the microservices architecture?
A. No! It isn't standard to develop all the UI projects based one particular teach like react or angular or vue but in the microservices architecture one service can be in react, one service in vue and whatever tech stack we want to.

226. How microservices are connected?
A. So just like our UI service right was developed on port :1234 ( from localhost: 1234) similarly all the microservices run on their own specific ports right. So suppose on port number :1234 we can have our UI service, suppose on part :1000 we can have our backend service, on port :3000 we can have our SMS service, etc. So on different port we can deploy our different services and at the end of the day all these ports can map to domain day all these ports can map to domain name. Suppose the backend is map to /api whatever our domain name is suppose we have a domain name namastedev.com/api and all these api's are deployed onto the same url. Similarly we can have sms on /sms so send a sms we just have to call this service /sms. Or we can deploy on just / right so no url ahead of / right so on the / as soon as it hit the main domain its just redirects to port :1234. So suppose if UI service wants to connect to backend service so they will make a call to /api or will call to different port lets say :1000. So thats how these microservices are connected and thats how they interact with each other.

227. How UI application fetch the data from backend?
A. There are two approaches that can be followed to fetch the data from backend tin the UI application:
I. Suppose our app loads right so as soon as our app load one thing we can do is we can just make an api call to fetch the data right and when we get the data then we can render it onto the UI. Suppose api call takes 500 ms so what will happen the page will load & our page will wait for 500 ms and after 500 ms it will render the UI. So what will happen is we have seen right when we open the web page we suddenly don't see anything and suddenly as soon as the api response it quickly show lot of staff on the screen.
II. The second approach is as soon as the page loads right then we'll just render our UI. Now what we will do after we had quickly render now we will make an API call and as soon as we get the result from API we will now populate or rerender our application with the new data. In react, we will always be using the second approach.

228. Why we will use the second approach to fetch data from backend and why this approach is better?
A. The second approach give us a better UX because in the initial approach till 500 ms our page is kind of like frozen for which we don't see anything onto page and after 500 ms we suddenly see everything right so thats a poor ux right. Instead in the second approach what we will do we load the page and then render whatever we can like rendering the skeleton and then later on slowly the website load once data is fetch. So its a better use experience and the use don't see lot of lack and all that random staff or jitteriness when we had the page. So therefore, we ill always use second approach to fetch data from backend in react.

229. What is useEffect hook? Describe it?
A. An useEffect has its own specific function. So first of all, this useEffect comes from react library and it will be imported as a named import. So useEffect is again a function right so we will called it like a function and useEffect will take two arguments so the first argument is arrow function. This arrow function is a callback function. So the first argument is a callback function and the second argument is a dependency array.

230. When will useEffect callback function will be called?
A. An useEffect callback function will be called after component renders. For example, when the body component will load right it will render the component as soon as the render cycle is finished it call the callback function which we have passed into useEffect. So this is how this useEffect works.

231. How Body component code is executed?
A. As soon as this Body component is rendered right, so it renders line by line so it just executes all the code and as soon as it sees useEffect right it will just keep the callback function so it will save this callback function to call it after render right and it moves ahead right and then it execute other code below useEffect and then it render jsx code. And then what will happen is once it is render properly then it call the callback function and it just execute whatever we define inside useEffect callback function. So this is how this useEffect works.

232. Do useEffect will be helpful when we have to implement the second approach to fetch data from backend?
A. Yes! An useEffect will be helpful when we have to implement the second approach to fetch data from backend.

233. How do we fetch the data from an api in react?
A. The logic of fetching the data from an api in react is exact the same as we used to do in javascript right there is nothing different. So fetching the data we will use a super power method or function fetch().

234. What is fetch()?
A. The fetch () is a super power method or function that is given to use by browsers so its a super power which a js engine has right. So this fetch() will fetch data from an API.

235. What does fetch() return?
A. The fetch() will return a promise.

236. How do we resolve a promise? Describe briefly?
A. Either we can use the traditional way of using a dot then and then resolving the promise using dot then right. And then catch and handling errors and all. Instead what we will do is we will follow a newer approach of async & await which is the standard practice in the industry. So we write async keyword before arrow function to make it async and then we will write wait before fetch() which will await for data to come. So this will resolve the promise. So once we have data right we have to convert this data to JSON isn't it. So we will again await this promise to resolve and we will convert this data to JSON.

237. What is CORS policy?
A. So basically, calling swiggy api from localhost has been blocked due to CORS policy. So basically, our browser chrome isn't allowing us to call swiggy api from localhost so from one origin to another origin so if there is a origin mismatch the browser blocks that API call. This is known as CORS policy.

238. Meanwhile API is taking time to load how can we improve the experience?
A. So what we can do is either we do one important thing so as soon as we load the page we can show a spinning loader.

239. How will we show a spinning loader?
A. So what we will do we will write a condition that if our listOfRestaurant is empty suppose we don't have any data so instead of rendering all return jsx code we'll render a loading screen isn't it.

240. Does showing a spinner is a good way? If no, why?
A. No! Showing a spinner isn't a good way because in the industry or UI world there is a concept know as shimmer UI which in a much better use experience.

241. What is a shimmer UI?
A. A shimmer UI resembles the page's actual UI so that the user understand how quickly the web or mobile app will load even before the content has shows up. So it in kind of like we load fake page or skeleton until we get the actual data from the API. So this is standard practice and if we're building then definitely we should use a shimmer UI to make a better user experience.

242. What is conditional rendering?
A. Rendering the component or jsx on the basis of condition so this concept is known as conditional rendering.

243. Why we use useState() local state variable instead of normal javascript variable?
A. If we use normal javascript variable instead of useState() local state variable then whenever its value gets updated then there aren't any way that the component gets refreshed or rerendered. So this is why normal javascript variable doesn't work in such cases. If we want to make our component dynamic we use local state variable here is where useState() state variable comes into picture. This is why, we use useState() local state variable instead of normal javascript variable.

244. Suppose after updating the button text using updating function provided by useState() hook and which is inside header component do react is rerendering the whole header component or it is just rerendering to modify only the button text?
A. Yes! React is rerendering the whole header component it modify only the button text.

245. Why react uses state updating function to update the value of state variable?
A. So the thought process is see when we have just normal variable lets say btnName so there is no way for react to track whether this btnName got updated or not isn't it if we change this btnName from onClick. But because state variable lets say btnNameReact is a special state variable so whenever we update it right by using state updating function lets say setBtnNameReact then react will trigger the render process once again. So basically, whenever this state variable will be change using this setBtnNameReact react will rerender component lets say header. React will kind of refresh this header component and all the updated values will be there because react trigger the reconciliation cycle. Therefore, react uses state updating function to update the value of state variable.

246. Is react is rerendering the whole header component again when state variable is updated or react will just rerendering the button text so what is happening?
A. Yes! React rerender the whole header component again when state variable is updated. So what happen was as soon as we click on Login button then the callback function was called then setBtnNameReact was called so react was keep a track of btnNameReact state variable and react will update this btnNameReact state variable and then react will call or rerender the header component once again but now this time we have updated value for  state variable that is btnNameReact.

247. If state variable and state updating function are const variable then how these constant gets updated with the new value so isn't it defeating the javascript principle?
A. Whenever we updated the value using setBtnNameReact basically react is updating this betNameReact and it is calling or rerender this header component or function once again but this time when we invoke this header function this btnNameReact is a new variable then it was before this is the beauty of react. React is keeping a track of everything that on the initial time btnNameReact state variable value was "Login" but as soon as we do setBtnNameReact("Logout") react will call or rerender this header function once again then react will create a new instance of btnNameReact and this btnNameReact is different then that older btnNameReact which was been printed. And now when this new btnNameReact was created so it isn't created with the default value but it is created with the updated value from setBtnNameReact and all this is happening behind the scene.

248. Whenever we update the state variable then what all is happening behind the scene?
A. As soon as we call this setBtnNameReact("Logout") then react will update the btnNameReact value or reference and the react will rerender the header component once again. React will find the diff between the older version and new version and react will see that in that diff only the button is getting updated and there aren't changes on other place within jsx code then nothing will change but only this button will be change. So this is happening with the diff algorithm and this is the reconciliation process in react. This is why react is fast because when we click on login button and if header is getting refreshed then only the login button gets refreshed and other elements will be intact nothing else will be refreshed. so that is why we need state variables.

249. How can we get the data from input box?
A. To get the data from input box we need to add value attribute to input tag to get the value of input box. And we have to bind this input box to the local state variable. So basically, to track the value of input box like whatever user is typing in so to get that value we've to bind this value with a local state variable of react.

250. Why input box isn't working in the first place after binding it with state variable?
A. We have given the value attribute to input box and bind this value to searchText state variable and this searchText over here is bind to input box that means whatever is there inside searchText state variable will be there inside the value of an input box. Now, when we change the value of input box then the value of input box is still tied to this searchText state variable so our searchText isn't getting updated but we're to trying to modify our input box so it can't happened because as the value is bind to this searchText and this searchText default value is empty so this input box will not change unless we change the value of searchText. So that is why to fix this what we'll do is we'll write a onChange handler over here in input tag. So as soon as our input changes what will happen our onChange callback function will also change searchText value. And we'll update the searchText with a new value so we'll get it from the callback method and that e which is normal callback method and which is actually an event and what we'll do is we'll setSearchText and the value we'll give inside this is e.target.value.

251. Suppose when we typing something input box then what is happening behind the scene?
A. Whenever we're typing something onto an input box then we're changing the local state variable on every key press and react rerender the whole body component on every key press. So whenever state variable changes, react trigger a reconciliation cycle meaning rerender the body component.

252. Do virtual DOM is making react fast? If no, then why react is fast?
A. No! Virtual DOM isn't making react fast so react fiber which is the new reconciliation algorithm which finds out the difference between the two virtual DOM and update the DOM only when require and the portion of DOM which only that portion is require. That is why, react is fast.

Episode - 6.1 | Swiggy API Issue Resolved

253. Define Fetch/XHR filter?
A. The Fetch/XHR full form is Fetch/XMLHttpRequest which is the place from where it will give use all the API calls so we select this filter on the chrome dev tools => Network tab => Fetch/XHR.

254. Define All filter?
A. An All filter is the place where it will give the result of all the urls that hs been fetch for a page. For example, the photos, the javascripts files, the css files, etc. So all of them will be present in the Network tab of chrome dev tools.

255. What are the the steps we follow to get or copy API request URL?
A. The following are the steps we can follow to get or copy API request URL:
I. Open chrome dev tools.
II. Click on Network tab.
III. Click on Fetch/XHR.
Iv. Click on Headers tab => Copy Request URL or right click on API call names list => copy => copy link address.

256. How can we extract data from an API?
A. So when we'll make an API call we'll get the results into dev tools => Network tab => Fetch/XHR => Preview and then we have to study the data that we're getting in JSON format. And then find the data we need and suppose if it is nested inside an objects then extract them using optional chaining and object dot notation.

Episode - 6.2 | CORS Plugin Issue solved

257. How to solve the CORS issue without CORS plugin and make it work for other people?
A. So there is something known as corsproxy.io website which basically helps us ot bypass this CORS error. Suppose we're making call from akshay.in to swiggy.com or we're trying to make a call from localhost to swiggy api so browser doesn't allow this so to bypass CORS we have something known as corsproxy.io.

258. Define CORS?
A. The CORS full form is Cross-Origin Resource Sharing. So when we try to make an API call from one origin to different origin meaning one domain name to another domain name.

259. How to use corsproxy.io?
A. Basically, we've to just copy the https://corsproxy.io/? and paste it before an api url. So what it will do now we aren't going to the swiggy website so we are going to corsproxy.io and internally it making a call to swiggy and getting us the data. So basically, we're not directly calling swiggy api we're calling corsproxy and corsproxy is making api call to swiggy and it getting the data and then it retuning back to us. So corsproxy is handling that CORS issue.

Episode - 07 | Finding the path

260. Do Dependency array changes the behaviour of useEffect render?
A. Yes! Dependency array changes the behaviour of useEffect render. So if we don't put dependency array as it not mandator by the way but only the callback function is mandatory inside the useEffect. So when we call a useEffect without a dependency array it will render every time the component render. If the dependency array is empty so then useEffect will be call on only initial render and just once when the component is render for the first time. So the basic nature or the default behaviour of useEffect is to be call after each render but if we give it a dependecy array then it is just call once. And if we put something the dependency array then useEffect will only be called when the dependency changes.

261. What are the best practices of useState() hook?
A. The following are the best practices of useState() hook:
I. Never create state variable using useState outtside of component because it doesn't make any sense. But if we do then react will throw an error like TypeError: Cannot read properties of null (reading 'useState'). So always call useState() hook inside component. And we know, useState has specific purpose it is use to create local state variable inside functional component so always call it inside functional component.
II. And try to call useState() hoo on the top means when the function start so that we'll not have lot of inconsistencies in our code right because javascript is a synchronous single threading language meaning the code will run line by line. So when we start from the top the first thing we should do is to create our state variable and tehn react also understand it properly right it doesn't create any inconsistencies when it runs our code.
III. Never use useState() hook or create state variable inside a if else. Yeah, it is a perfectly valid code because javascript allow us to do it but don't do it because it can create inconsistencies in our program. See if we mashup with react then react will mashup with our code or application. So try to use how react tells us to use right. Even the react documentation says that don't use the state like useState() hook inside a condition so never do it.
IV. Never create useState() hook inside for loop so never do it.
V. Never crate useState() hook inside function.
VI. So basically, the state variable are meant to be created inside the functional component on higher lever right or first level and nowhere else. Try to keep it on the top if we follow this we'll never have issue with the useState variable. So this is the best practice and this is how react will understand the code properly and execute how it wants to right.

262. How can we create different routes inside react application?
A. We can create different routes inside react application by using npm ;javascript library which is known as React Router DOM. And this is one of most popular library and almost by projects are build using this library.

263. How will we install react router library into our code?
A. We can install react router library into our code by writing command npm in react-router-dom into the terminal.

264. How do we use react router library?
A. For creating routing we have to go to app.js and over here we've to create routing configuration so whenever we've to develp routes we've to create routing configuration. And so to create routing configuration we have to import {createBrowserRouter} from 'react-router-dom'. So we're going to use createBrowserRouter and this createBrowserRouter will create routing configuration. So basically, we'll create routing configuration inside createBrowserRouter(). Adn this configuration means that some information that will define what will happen on a specific route. An information that will tell the createBrowserRouter that will happen on a specific path so suppose if we're calling about what should happen if we call that url or route. So this createBrowserRouter that list of path which is nothing but an object and an object will contain two things that are path and element. So if path is "/" then what should happen and path is "/about" then what should happen. So if our path is "/" then load an element that is home page which is <AppLayout />. But if our path is "/about" then load the element that is about compoent or page. So this how we give the configuration to createBrowserRouter. But just creating the configuration won't work so we'll have to provide this configuration to render it onto the page. So for this, we've one more important component that we can import from react-route-dom as it has a functionality by giving us a component which is known as RouterProvider. So this RouterProvider will provide the routing configuration to our app like early we're rendering the <AppLayout /> directly and now instead of this we'll provide it our router configuration. So the <RouterProvider /> is a component and we'll provide the appRouter configuartion as a value of router prop of RouterProvider component.



- Home works: Build restaurant all categories including veg switch button from episode-07.

- How do we read dynamic path let's say ":resId" from our component?
A. Again we have a super power which is given to us by react router dom which will give us what is there as a param. So that super power is a hook which is basically known as useParams and it comes from react-router-dom.

- How to use useParams hook?
A. So basically, we'll extract resId from our useParams hook because useParams returns an object with resId s that is why we need to destructure that return object on the fly. And now this resId will contain an dynamic path id and we'll pass this resId in the fetch url.

- What is Link behind the scene?
A. Link is a component which is given to us by react router dom and which is a special component and behind the link is using anchor tag.

- If Link is an anchor tag then what the difference between Link and anchor tag?
A. React router dom give us Link and it is a wrapper over anchor tag so when we wrap any text as Link right now react router dom will keep a track that text is a Link and it don't have to refresh a page. It a special type of Link and behind the scene html or browser doesn't understand Link right so react router dom making it a anchor tag behind the scene and also keeping a track of it.

